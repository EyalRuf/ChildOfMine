#if UNITY_EDITOR
using System.IO;
using UnityEngine;

#if CC_DI
using CardboardCore.Utilities;
#endif

namespace CardboardCore.Pooling
{
    public static class PoolNamesGenerator
    {
        public static void Write(Object creator, PoolEntry[] poolEntries)
        {
            string folderPath = Path.Combine(Application.dataPath, "Scripts", "Pooling");

#if CC_DI
			Log.Write($"Generating Pool Names for {creator.name} at {folderPath}");
#else
            Debug.Log($"Generating Pool Names for {creator.name} at {folderPath}");
#endif

            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            string filePath = Path.Combine(folderPath, creator.name + "Names.cs");

            using (StreamWriter streamWriter = new StreamWriter(filePath))
            {
                const string warning = "/*GENERATED FILE, DO NOT MODIFY MANUALLY!*/\n";
                streamWriter.Write(warning);

                const string source = "/*GENERATED BY \"PoolNamesGenerator\"*/\n\n";
                streamWriter.Write(source);

                const string startNamespace = "namespace Pooling\n{\n";
                streamWriter.Write(startNamespace);

                string startClass = $"    public static class {creator.name}Names\n    " + "{\n";
                streamWriter.Write(startClass);

                const string property = "        public const string {0} = \"{1}\";\n";

                for (int i = 0; i < poolEntries.Length; i++)
                {
                    string propertyName = poolEntries[i].Prefab.name;
                    string propertyValue = poolEntries[i].Prefab.name;

                    string propertyFormatted = string.Format(property, propertyName, propertyValue);
                    streamWriter.Write(propertyFormatted);
                }

                const string endClass = "    }\n";
                streamWriter.Write(endClass);

                const string endNamespace = "}\n";
                streamWriter.Write(endNamespace);
            }
        }
    }
}
#endif
